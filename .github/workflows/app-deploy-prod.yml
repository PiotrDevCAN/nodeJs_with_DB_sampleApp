---
name: ci-build-and-deploy-production
on:
  push:
    branches:
      -  app_nodejs_db_poc
jobs:
  Build:
    runs-on:
      - aro-prod-westus3
    environment: production
    timeout-minutes: 60
    steps:
      - name: Get JFROG Credentials
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-kpes/data/dev/w3us/jfrog_piotr JFROG_USER | JFROG_USER ; 
            kps-gd-app-kpes/data/dev/w3us/jfrog_piotr JFROG_TOKEN | JFROG_TOKEN     
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Jfrog
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.JFROG_URL }}
          username: ${{ steps.import-secrets.outputs.JFROG_USER }}
          password: ${{ steps.import-secrets.outputs.JFROG_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: | 
            ${{ vars.JFROG_URL }}/${{ vars.JFROG_CONTAINER }}/app-nodejs-db-poc:${{ vars.SHORT_NAME }}_${{ github.run_number }}
  Deploy:
    name: Deploy
    needs:
      - Build
    runs-on:
      - aro-prod-westus3
    environment: production
    timeout-minutes: 60
    steps:
      - name: Checkout Sourcecode
        uses: actions/checkout@v3
      - name: Import JFROG & ARO Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.kyndryl.net
          method: token
          namespace: kyndryl/KYNDRYL_PRACTICES/
          token: ${{ secrets.VAULT_TOKEN }}
          tlsSkipVerify: false
          secrets: |
            kps-gd-app-kpes/data/dev/w3us/jfrog_piotr JFROG_USER | JFROG_USER ;
            kps-gd-app-kpes/data/dev/w3us/jfrog_piotr JFROG_TOKEN | JFROG_TOKEN ;
            kps-gd-app-kpes/data/dev/w3us/openshift-sa SERVER_URL | SERVER_URL ;
            kps-gd-app-kpes/data/dev/w3us/openshift-sa SA_TOKEN | SA_TOKEN ;
            kps-gd-app-kpes/data/dev/w3us/openshift-sa NAMESPACE | NAMESPACE ;
            kps-gd-app-kpes/data/dev/w3us/sqlserver_wus3 server | DB_SERVER ;
            kps-gd-app-kpes/data/dev/w3us/sqlserver_wus3 database | DB_NAME ;
            kps-gd-app-kpes/data/dev/w3us/sqlserver_wus3 username | DB_USER_NAME ;
            kps-gd-app-kpes/data/dev/w3us/sqlserver_wus3 password | DB_USER_PW ;
            kps-gd-app-kpes/data/dev/w3us/smtpserver host | SMTP_HOST ;
            kps-gd-app-kpes/data/dev/w3us/smtpserver username | SMTP_USER_NAME ;
            kps-gd-app-kpes/data/dev/w3us/smtpserver password | SMTP_USER_PW ;
            kps-gd-app-kpes/data/dev/w3us/SSOserver host | SSO_HOST ;
            kps-gd-app-kpes/data/dev/w3us/SSOserver client_id | SSO_CLIENT_ID ;
            kps-gd-app-kpes/data/dev/w3us/SSOserver client_secret | SSO_CLIENT_SECRET ;
            kps-gd-app-kpes/data/dev/w3us/SSOserver client_api_token | SSO_API_TOKEN ;
            kps-gd-app-kpes/data/dev/w3us/Redis PORT | REDIS_PORT ;
            kps-gd-app-kpes/data/dev/w3us/Redis PASSWORD | REDIS_PW
      - name: Login to ARO Cluster
        id: set-aro-context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ steps.import-secrets.outputs.SERVER_URL }}
          openshift_token: ${{ steps.import-secrets.outputs.SA_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
      - name: Set ImagePullSecrets
        id: image_secret
        uses: Azure/k8s-create-secret@v4.0
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          secret-name: app-nodejs-db-poc-docker-secrets
          container-registry-url: ${{ vars.JFROG_URL }}
          container-registry-username: ${{ steps.import-secrets.outputs.JFROG_USER }}
          container-registry-password: ${{ steps.import-secrets.outputs.JFROG_TOKEN }}
      - name: Deploy application
        id: deploy-app
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ steps.import-secrets.outputs.NAMESPACE }}
          images: |
            ${{ vars.JFROG_URL }}/${{ vars.JFROG_CONTAINER }}/app-nodejs-db-poc:${{ vars.SHORT_NAME }}_${{ github.run_number }}
          # Path to the manifest files to be used for deployment. 
          manifests: |
            ./env-configmap.yml
            ./env-secrets.yml
            ./myapp-deployment-prod.yml
            ./myapp-service.yml
            ./myapp-sn-route-prod.yml
          # Multiline input where each line contains the name of a docker-registry secret 
          # that has already been setup within the cluster. 
          # Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
          imagepullsecrets: |
            app-nodejs-db-poc-docker-secrets
            env-configmap
            env-secrets